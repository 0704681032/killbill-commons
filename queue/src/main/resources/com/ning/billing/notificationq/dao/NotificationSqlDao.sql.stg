group NotificationSqlDao;

CHECK_TENANT() ::= "search_key2 = :searchKey2"
AND_CHECK_TENANT() ::= "AND <CHECK_TENANT()>"

getReadyNotifications() ::= <<
    select
      record_id
      , class_name
      , event_json
      , user_token
      , future_user_token
      , created_date
      , creating_owner
      , effective_date
      , queue_name
      , processing_owner
      , processing_available_date
      , processing_state
      , search_key1
      , search_key2
    from notifications
    where
      effective_date \<= :now
      and processing_state != 'PROCESSED'
      and processing_state != 'REMOVED'
      and (processing_owner IS NULL OR processing_available_date \<= :now)
    order by
      effective_date asc
      , created_date asc
      , record_id
    limit :max
    ;
>>

getPendingCountNotifications() ::= <<
    select
      count(*)
    from notifications
    where
      effective_date \<= :now
      and processing_state = 'AVAILABLE'
    ;
>>

getFutureNotificationsForAccount() ::= <<
select
    record_id
  , class_name
  , event_json
  , user_token
  , future_user_token
  , created_date
  , creating_owner
  , effective_date
  , queue_name
  , processing_owner
  , processing_available_date
  , processing_state
  , search_key1
  , search_key2
from notifications
where queue_name = :queueName
and processing_state = 'AVAILABLE'
and search_key1 = :searchKey1
and effective_date >= :now
order by effective_date, record_id
;
>>

removeNotification()  ::= <<
  update notifications
    set
  processing_state = 'REMOVED'
    where
  record_id = :recordId
;
>>

claimNotification() ::= <<
    update notifications
    set
      processing_owner = :owner
      , processing_available_date = :nextAvailable
      , processing_state = 'IN_PROCESSING'
    where
      record_id = :recordId
      and processing_state != 'PROCESSED'
      and processing_state != 'REMOVED'
      and (processing_owner IS NULL OR processing_available_date \<= :now)
    ;
>>

clearNotification() ::= <<
    update notifications
    set
      processing_state = 'PROCESSED'
    where
      record_id = :recordId
    ;
>>

removeNotificationsByKey() ::= <<
    update notifications
    set
      processing_state = 'REMOVED'
    where
      event_json = :eventJson
    ;
>>

insertNotification() ::= <<
    insert into notifications (
      class_name
      , event_json
      , user_token
      , future_user_token
      , created_date
      , creating_owner
      , effective_date
      , queue_name
      , processing_owner
      , processing_available_date
      , processing_state
      , search_key1
      , search_key2
    ) values (
        :className
      , :eventJson
      , :userToken
      , :futureUserToken
      , :createdDate
      , :creatingOwner
      , :effectiveDate
      , :queueName
      , :processingOwner
      , :processingAvailableDate
      , :processingState
      , :searchKey1
      , :searchKey2
    );
>>

insertClaimedHistory() ::= <<
    insert into claimed_notifications (
          owner_id
        , claimed_date
        , notification_record_id
        , search_key1
        , search_key2
      ) values (
          :ownerId
        , :claimedDate
        , :notificationRecordId
        , :searchKey1
        , :searchKey2
      );
>>
